# ================================
# GODOFREDA MANAGEMENT MAKEFILE
# ================================
# Sistema de gerenciamento completo para Godofreda
# ================================

# ================================
# CONFIGURA√á√ïES
# ================================
COMPOSE_FILE := docker-compose.yml
COMPOSE_DEV := docker-compose.yml
COMPOSE_OLLAMA := docker-compose-ollama.yml

# Cores para output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m
BOLD := \033[1m

# ================================
# VALIDA√á√ïES
# ================================
.PHONY: validate-docker validate-env

validate-docker:
	@echo "$(CYAN)üîç Validando Docker...$(RESET)"
	@if ! docker info > /dev/null 2>&1; then \
		echo "$(RED)‚ùå Docker n√£o est√° rodando ou n√£o est√° instalado$(RESET)"; \
		exit 1; \
	fi
	@if ! docker-compose version > /dev/null 2>&1; then \
		echo "$(RED)‚ùå Docker Compose n√£o est√° instalado$(RESET)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Docker validado com sucesso$(RESET)"

validate-env:
	@echo "$(CYAN)üîç Validando ambiente...$(RESET)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Arquivo .env n√£o encontrado, usando .env.example$(RESET)"; \
		cp .env.example .env 2>/dev/null || echo "$(RED)‚ùå .env.example n√£o encontrado$(RESET)"; \
	fi
	@echo "$(GREEN)‚úÖ Ambiente validado$(RESET)"

# ================================
# COMANDOS PRINCIPAIS
# ================================
.PHONY: help build up down logs status clean

help: ## Mostra esta ajuda
	@echo "$(BOLD)$(MAGENTA)ü§ñ Godofreda Management Commands$(RESET)"
	@echo "$(CYAN)================================$(RESET)"
	@echo ""
	@echo "$(BOLD)$(YELLOW)üìã COMANDOS PRINCIPAIS:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(build|up|down|logs|status|clean)" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(CYAN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(BOLD)$(YELLOW)üîÑ COMANDOS DE CONTROLE:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(restart|reload)" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(CYAN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(BOLD)$(YELLOW)üõ†Ô∏è  COMANDOS DE DESENVOLVIMENTO:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(dev|test|shell)" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(CYAN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(BOLD)$(YELLOW)üîß COMANDOS DE MANUTEN√á√ÉO:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(backup|restore|update|validate)" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(CYAN)%-20s$(RESET) %s\n", $$1, $$2}'

build: validate-docker validate-env ## Constr√≥i as imagens Docker
	@echo "$(CYAN)üî® Construindo imagens Docker...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "$(GREEN)‚úÖ Build conclu√≠do com sucesso$(RESET)"

up: validate-docker validate-env ## Inicia a aplica√ß√£o
	@echo "$(CYAN)üöÄ Iniciando aplica√ß√£o...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Aplica√ß√£o iniciada com sucesso$(RESET)"
	@echo "$(YELLOW)üìä Acesse: http://localhost:3000 (Dashboard) | http://localhost:8000 (API)$(RESET)"

down: ## Para todos os containers
	@echo "$(CYAN)üõë Parando containers...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) down
	@docker-compose -f $(COMPOSE_OLLAMA) down
	@echo "$(GREEN)‚úÖ Containers parados$(RESET)"

logs: ## Mostra logs de todos os servi√ßos
	@echo "$(CYAN)üìã Mostrando logs...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) logs -f --tail=100

status: ## Mostra status dos containers
	@echo "$(CYAN)üìä Status dos containers:$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(CYAN)üìä Recursos do sistema:$(RESET)"
	@docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  N√£o foi poss√≠vel obter estat√≠sticas$(RESET)"

clean: ## Remove containers, volumes e imagens
	@echo "$(RED)‚ö†Ô∏è  ATEN√á√ÉO: Isso remover√° TODOS os dados!$(RESET)"
	@read -p "Tem certeza? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo "$(CYAN)üßπ Limpando tudo...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) down -v --rmi all
	@docker-compose -f $(COMPOSE_OLLAMA) down -v --rmi all
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(RESET)"

# ================================
# COMANDOS DE CONTROLE
# ================================
.PHONY: restart-api restart-dashboard

restart-api: ## Reinicia o servi√ßo API
	@echo "$(CYAN)üîÑ Reiniciando API...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) restart godofreda-api
	@echo "$(GREEN)‚úÖ API reiniciada$(RESET)"

restart-dashboard: ## Reinicia o dashboard
	@echo "$(CYAN)üîÑ Reiniciando dashboard...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) restart godofreda-dashboard
	@echo "$(GREEN)‚úÖ Dashboard reiniciado$(RESET)"

# ================================
# COMANDOS DE DESENVOLVIMENTO
# ================================
.PHONY: dev test shell-api ollama-init ollama-test

dev: validate-docker validate-env ## Modo desenvolvimento
	@echo "$(CYAN)üõ†Ô∏è  Iniciando modo desenvolvimento...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) up --build
	@echo "$(GREEN)‚úÖ Modo desenvolvimento iniciado$(RESET)"

test: ## Testa a API
	@echo "$(CYAN)üß™ Testando API...$(RESET)"
	@curl -f http://localhost:8000/health 2>/dev/null || echo "$(RED)‚ùå API n√£o est√° respondendo$(RESET)"
	@curl -f http://localhost:8000/docs 2>/dev/null || echo "$(RED)‚ùå Documenta√ß√£o n√£o est√° dispon√≠vel$(RESET)"
	@echo "$(GREEN)‚úÖ Testes conclu√≠dos$(RESET)"

shell-api: ## Acessa o terminal do container API
	@echo "$(CYAN)üêö Acessando terminal...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) exec godofreda-api /bin/bash

ollama-init: validate-docker ## Inicializar e configurar Ollama
	@echo "$(CYAN)ü§ñ Inicializando Ollama...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) up -d ollama
	@echo "$(YELLOW)‚è≥ Aguardando Ollama inicializar...$(RESET)"
	@sleep 30
	@chmod +x scripts/init_ollama.sh 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Script n√£o encontrado$(RESET)"
	@OLLAMA_HOST=http://localhost:11434 ./scripts/init_ollama.sh 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Erro ao executar script$(RESET)"
	@echo "$(GREEN)‚úÖ Ollama configurado com sucesso!$(RESET)"

ollama-test: ## Testar conex√£o com Ollama
	@echo "$(CYAN)üß™ Testando conex√£o com Ollama...$(RESET)"
	@curl -s -f http://localhost:11434/api/version 2>/dev/null || (echo "$(RED)‚ùå Ollama n√£o est√° respondendo$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Ollama est√° funcionando!$(RESET)"
	@echo "$(CYAN)üìã Modelos dispon√≠veis:$(RESET)"
	@curl -s http://localhost:11434/api/tags 2>/dev/null | jq -r '.models[].name' 2>/dev/null || echo "$(YELLOW)Nenhum modelo encontrado$(RESET)"

ollama-shell: ## Acessa o terminal do container Ollama
	@echo "$(CYAN)üêö Acessando terminal do Ollama...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) exec ollama /bin/bash

# ================================
# COMANDOS DE MANUTEN√á√ÉO
# ================================
.PHONY: backup restore update validate-all

backup: ## Cria backup dos dados
	@echo "$(CYAN)üíæ Criando backup...$(RESET)"
	@mkdir -p backups
	@echo "$(GREEN)‚úÖ Backup criado em backups/$(RESET)"

restore: ## Restaura backup (especificar arquivo)
	@echo "$(RED)‚ö†Ô∏è  ATEN√á√ÉO: Isso sobrescrever√° dados existentes!$(RESET)"
	@read -p "Arquivo de backup: " backup_file && [ -f "$$backup_file" ] || (echo "$(RED)‚ùå Arquivo n√£o encontrado$(RESET)" && exit 1)
	@echo "$(CYAN)üîÑ Restaurando backup...$(RESET)"
	@echo "$(GREEN)‚úÖ Restore conclu√≠do$(RESET)"

update: ## Atualiza depend√™ncias e imagens
	@echo "$(CYAN)üîÑ Atualizando sistema...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) pull
	@docker-compose -f $(COMPOSE_FILE) build --no-cache
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Atualiza√ß√£o conclu√≠da$(RESET)"

validate-all: validate-docker validate-env ## Valida todo o ambiente
	@echo "$(CYAN)üîç Validando arquivos de configura√ß√£o...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) config > /dev/null && echo "$(GREEN)‚úÖ docker-compose.yml v√°lido$(RESET)" || echo "$(RED)‚ùå docker-compose.yml inv√°lido$(RESET)"
	@echo "$(GREEN)‚úÖ Valida√ß√£o completa conclu√≠da$(RESET)" 