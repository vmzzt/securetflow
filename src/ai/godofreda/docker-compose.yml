# ================================
# GODOFREDA DOCKER COMPOSE
# ================================
# Configuração de produção com segurança aprimorada
# ================================

version: '3.8'

# ================================
# REDES
# ================================
networks:
  godofreda-network:
    driver: bridge
    name: godofreda-network
    labels:
      - "com.godofreda.description=Godofreda internal network"
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# SERVIÇOS
# ================================
services:
  # ================================
  # API BACKEND
  # ================================
  godofreda-api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: godofreda-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Configurações de segurança
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_TEXT_LENGTH=${MAX_TEXT_LENGTH:-1000}
      
      # CORS seguro
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      
      # TTS Configuration
      - TTS_MODEL=${TTS_MODEL:-tts_models/multilingual/multi-dataset/xtts_v2}
      - TTS_SPEAKER=${TTS_SPEAKER:-p230}
      - TTS_TEMP_DIR=${TTS_TEMP_DIR:-app/tts_temp}
      - COQUI_TOS_AGREED=${COQUI_TOS_AGREED:-1}
      
      # LLM Configuration
      - OLLAMA_HOST=${OLLAMA_HOST:-http://ollama:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama2:7b}
      - OLLAMA_TIMEOUT=${OLLAMA_TIMEOUT:-30}
      - OLLAMA_MAX_RETRIES=${OLLAMA_MAX_RETRIES:-3}
      - OLLAMA_RETRY_DELAY=${OLLAMA_RETRY_DELAY:-2}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      
      # File Management
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-100}
      - CLEANUP_INTERVAL_HOURS=${CLEANUP_INTERVAL_HOURS:-1}
      - FILE_MAX_AGE_HOURS=${FILE_MAX_AGE_HOURS:-1}
      
      # Monitoring
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - METRICS_PORT=${METRICS_PORT:-8000}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      - RATE_LIMIT_BURST_SIZE=${RATE_LIMIT_BURST_SIZE:-10}
      
      # Logging
      - LOG_FILE_PATH=${LOG_FILE_PATH:-app/logs/godofreda.log}
      
      # Workers
      - WORKERS=${WORKERS:-1}
    volumes:
      # Volumes nomeados para segurança
      - tts_temp:/app/tts_temp
      - logs:/app/logs
      - tts_cache:/app/tts_models
    depends_on:
      - redis
      - ollama
    networks:
      - godofreda-network
    # Configurações de segurança (ajustadas para desenvolvimento)
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # FRONTEND DASHBOARD
  # ================================
  godofreda-dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: godofreda-dashboard
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - nginx_cache:/tmp/nginx_cache
      - nginx_logs:/tmp/nginx_logs
    depends_on:
      - godofreda-api
    networks:
      - godofreda-network
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    user: "101:101"  # nginx user
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # REDIS CACHE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: godofreda-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - godofreda-network
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    read_only: false
    user: "999:999"  # redis user
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # OLLAMA LLM
  # ================================
  ollama:
    image: ollama/ollama:latest
    container_name: godofreda-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - godofreda-network
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    read_only: false
    user: "1000:1000"
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ================================
# VOLUMES
# ================================
volumes:
  # Volumes nomeados para segurança
  tts_temp:
    driver: local
  logs:
    driver: local
  tts_cache:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

# ================================
# CONFIGURAÇÕES GLOBAIS
# ================================
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# ================================
# NOTAS DE USO
# ================================
# Para usar este compose:
# 1. Copie .env.example para .env e configure as variáveis
# 2. Execute: docker-compose up -d
# 3. Acesse: http://localhost:3000 (Dashboard)
# 4. API: http://localhost:8000
# ================================