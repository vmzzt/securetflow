from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime

class VulnerabilityBase(BaseModel):
    title: str
    description: Optional[str] = None
    severity: str = Field(pattern="^(critical|high|medium|low)$")
    category: Optional[str] = None
    cvss: Optional[float] = None
    status: Optional[str] = Field(default="open", pattern="^(open|in-progress|resolved|false-positive)$")
    solution: Optional[str] = None
    references: Optional[List[str]] = None
    cve: Optional[str] = None
    target_id: Optional[int] = None

class VulnerabilityCreate(VulnerabilityBase):
    pass

class VulnerabilityUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    severity: Optional[str] = Field(default=None, pattern="^(critical|high|medium|low)$")
    category: Optional[str] = None
    cvss: Optional[float] = None
    status: Optional[str] = Field(default=None, pattern="^(open|in-progress|resolved|false-positive)$")
    solution: Optional[str] = None
    references: Optional[List[str]] = None
    cve: Optional[str] = None
    target_id: Optional[int] = None

class VulnerabilityResponse(VulnerabilityBase):
    id: int
    user_id: Optional[int] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True 