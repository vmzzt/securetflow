import React from 'react';

interface VulnerabilityData {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface VulnerabilityChartProps {
  data: VulnerabilityData;
  className?: string;
}

export const VulnerabilityChart: React.FC<VulnerabilityChartProps> = ({
  data,
  className = ''
}) => {
  const total = data.critical + data.high + data.medium + data.low;
  
  const getPercentage = (value: number) => {
    return total > 0 ? (value / total) * 100 : 0;
  };

  const getColor = (severity: keyof VulnerabilityData) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-600';
      case 'high':
        return 'bg-orange-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getLabel = (severity: keyof VulnerabilityData) => {
    switch (severity) {
      case 'critical':
        return 'Críticas';
      case 'high':
        return 'Altas';
      case 'medium':
        return 'Médias';
      case 'low':
        return 'Baixas';
      default:
        return severity;
    }
  };

  const severities: (keyof VulnerabilityData)[] = ['critical', 'high', 'medium', 'low'];

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Gráfico de barras */}
      <div className="space-y-2">
        {severities.map((severity) => {
          const value = data[severity];
          const percentage = getPercentage(value);
          
          return (
            <div key={severity} className="flex items-center space-x-3">
              <div className="w-16 text-sm font-medium text-gray-700">
                {getLabel(severity)}
              </div>
              <div className="flex-1 bg-gray-200 rounded-full h-4">
                <div
                  className={`h-4 rounded-full ${getColor(severity)} transition-all duration-300`}
                  style={{ width: `${percentage}%` }}
                />
              </div>
              <div className="w-12 text-sm text-gray-600 text-right">
                {value}
              </div>
            </div>
          );
        })}
      </div>

      {/* Legenda */}
      <div className="flex flex-wrap gap-4 pt-4 border-t border-gray-200">
        {severities.map((severity) => (
          <div key={severity} className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${getColor(severity)}`} />
            <span className="text-sm text-gray-600">
              {getLabel(severity)} ({data[severity]})
            </span>
          </div>
        ))}
      </div>

      {/* Total */}
      <div className="text-center pt-4">
        <div className="text-2xl font-bold text-gray-900">{total}</div>
        <div className="text-sm text-gray-500">Total de Vulnerabilidades</div>
      </div>
    </div>
  );
}; 