import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  ChartOptions
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

interface VulnerabilityChartProps {
  data?: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
}

export const VulnerabilityChart: React.FC<VulnerabilityChartProps> = ({ 
  data = { critical: 2, high: 5, medium: 12, low: 8 }
}) => {
  const chartData = {
    labels: ['Críticas', 'Altas', 'Médias', 'Baixas'],
    datasets: [
      {
        data: [data.critical, data.high, data.medium, data.low],
        backgroundColor: [
          '#ef4444', // Critical - Red
          '#f97316', // High - Orange  
          '#eab308', // Medium - Yellow
          '#22c55e'  // Low - Green
        ],
        borderColor: [
          '#dc2626',
          '#ea580c', 
          '#ca8a04',
          '#16a34a'
        ],
        borderWidth: 2,
      },
    ],
  };

  const options: ChartOptions<'doughnut'> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom' as const,
        labels: {
          padding: 20,
          usePointStyle: true,
        }
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const label = context.label || '';
            const value = context.parsed;
            const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);
            const percentage = ((value / total) * 100).toFixed(1);
            return `${label}: ${value} (${percentage}%)`;
          }
        }
      }
    },
  };

  return (
    <div className="w-full h-64">
      <Doughnut data={chartData} options={options} />
    </div>
  );
}; 