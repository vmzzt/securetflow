/**
 * Vulnerability Types
 * TypeScript interfaces and types for vulnerability management
 */

/**
 * Vulnerability severity enumeration
 */
export enum VulnerabilitySeverity {
  CRITICAL = 'critical',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low',
  INFO = 'info'
}

/**
 * Vulnerability status enumeration
 */
export enum VulnerabilityStatus {
  OPEN = 'open',
  FIXED = 'fixed',
  FALSE_POSITIVE = 'false_positive',
  ACCEPTED = 'accepted',
  IN_PROGRESS = 'in_progress',
  VERIFIED = 'verified'
}

/**
 * Vulnerability category enumeration
 */
export enum VulnerabilityCategory {
  INJECTION = 'injection',
  BROKEN_AUTH = 'broken_auth',
  SENSITIVE_DATA = 'sensitive_data',
  XXE = 'xxe',
  BROKEN_ACCESS = 'broken_access',
  SECURITY_MISCONFIG = 'security_misconfig',
  XSS = 'xss',
  INSECURE_DESERIALIZATION = 'insecure_deserialization',
  COMPONENTS = 'components',
  INSUFFICIENT_LOGGING = 'insufficient_logging',
  NETWORK = 'network',
  CONFIGURATION = 'configuration',
  CODE_QUALITY = 'code_quality',
  DEPENDENCY = 'dependency',
  CONTAINER = 'container',
  CLOUD = 'cloud',
  API = 'api',
  MOBILE = 'mobile',
  IOT = 'iot',
  OTHER = 'other'
}

/**
 * Vulnerability type enumeration
 */
export enum VulnerabilityType {
  SQL_INJECTION = 'sql_injection',
  XSS_REFLECTED = 'xss_reflected',
  XSS_STORED = 'xss_stored',
  XSS_DOM = 'xss_dom',
  CSRF = 'csrf',
  SSRF = 'ssrf',
  XXE = 'xxe',
  LFI = 'lfi',
  RFI = 'rfi',
  COMMAND_INJECTION = 'command_injection',
  LDAP_INJECTION = 'ldap_injection',
  XPATH_INJECTION = 'xpath_injection',
  NO_SQL_INJECTION = 'nosql_injection',
  BROKEN_AUTHENTICATION = 'broken_authentication',
  BROKEN_SESSION = 'broken_session',
  WEAK_PASSWORD = 'weak_password',
  SENSITIVE_DATA_EXPOSURE = 'sensitive_data_exposure',
  INSECURE_COMMUNICATION = 'insecure_communication',
  BROKEN_ACCESS_CONTROL = 'broken_access_control',
  DIRECTORY_TRAVERSAL = 'directory_traversal',
  PRIVILEGE_ESCALATION = 'privilege_escalation',
  SECURITY_MISCONFIGURATION = 'security_misconfiguration',
  DEFAULT_CREDENTIALS = 'default_credentials',
  OPEN_PORTS = 'open_ports',
  WEAK_ENCRYPTION = 'weak_encryption',
  INSECURE_DESERIALIZATION = 'insecure_deserialization',
  VULNERABLE_COMPONENTS = 'vulnerable_components',
  OUTDATED_SOFTWARE = 'outdated_software',
  INSUFFICIENT_LOGGING = 'insufficient_logging',
  WEAK_SSL_TLS = 'weak_ssl_tls',
  MISSING_SECURITY_HEADERS = 'missing_security_headers',
  OPEN_REDIRECT = 'open_redirect',
  CLICKJACKING = 'clickjacking',
  OTHER = 'other'
}

/**
 * CVSS vector interface
 */
export interface CVSSVector {
  version: '2.0' | '3.0' | '3.1';
  vector: string;
  baseScore: number;
  temporalScore?: number;
  environmentalScore?: number;
  severity: VulnerabilitySeverity;
}

/**
 * CVE information interface
 */
export interface CVEInfo {
  id: string;
  description: string;
  references: string[];
  publishedDate: Date;
  lastModifiedDate: Date;
  cvss?: CVSSVector;
  affectedVersions?: string[];
  vendor?: string;
  product?: string;
}

/**
 * CWE information interface
 */
export interface CWEInfo {
  id: string;
  name: string;
  description: string;
  likelihood: 'low' | 'medium' | 'high';
  examples?: string[];
  mitigations?: string[];
}

/**
 * Vulnerability evidence interface
 */
export interface VulnerabilityEvidence {
  type: 'request' | 'response' | 'screenshot' | 'log' | 'code' | 'other';
  content: string;
  format: 'text' | 'html' | 'json' | 'xml' | 'image' | 'binary';
  description?: string;
  timestamp: Date;
}

/**
 * Vulnerability remediation interface
 */
export interface VulnerabilityRemediation {
  type: 'patch' | 'configuration' | 'code_change' | 'workaround' | 'mitigation';
  description: string;
  steps: string[];
  difficulty: 'easy' | 'medium' | 'hard';
  estimatedTime: string;
  cost?: string;
  references?: string[];
  code?: string;
}

/**
 * Vulnerability verification interface
 */
export interface VulnerabilityVerification {
  verified: boolean;
  verifiedAt?: Date;
  verifiedBy?: string;
  method: 'manual' | 'automated' | 'retest';
  notes?: string;
  evidence?: VulnerabilityEvidence[];
}

/**
 * Vulnerability timeline interface
 */
export interface VulnerabilityTimeline {
  discovered: Date;
  reported?: Date;
  acknowledged?: Date;
  triaged?: Date;
  assigned?: Date;
  fixed?: Date;
  verified?: Date;
  closed?: Date;
}

/**
 * Vulnerability interface
 */
export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  summary: string;
  severity: VulnerabilitySeverity;
  category: VulnerabilityCategory;
  type: VulnerabilityType;
  status: VulnerabilityStatus;
  cvss?: CVSSVector;
  cve?: CVEInfo;
  cwe?: CWEInfo;
  affectedUrl?: string;
  affectedParameter?: string;
  affectedComponent?: string;
  payload?: string;
  evidence: VulnerabilityEvidence[];
  remediation: VulnerabilityRemediation;
  verification?: VulnerabilityVerification;
  timeline: VulnerabilityTimeline;
  tags: string[];
  tool: string;
  scanId: string;
  targetId: string;
  assignedTo?: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  riskScore: number; // 0-100
  falsePositiveProbability: number; // 0-100
  businessImpact: 'low' | 'medium' | 'high' | 'critical';
  technicalImpact: 'low' | 'medium' | 'high' | 'critical';
  exploitability: 'none' | 'low' | 'medium' | 'high';
  exploitAvailable: boolean;
  publicExploit?: string;
  customFields?: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
  createdBy: string;
  updatedBy: string;
}

/**
 * Vulnerability creation request interface
 */
export interface CreateVulnerabilityRequest {
  title: string;
  description: string;
  summary: string;
  severity: VulnerabilitySeverity;
  category: VulnerabilityCategory;
  type: VulnerabilityType;
  affectedUrl?: string;
  affectedParameter?: string;
  affectedComponent?: string;
  payload?: string;
  evidence: VulnerabilityEvidence[];
  remediation: VulnerabilityRemediation;
  tags?: string[];
  tool: string;
  scanId: string;
  targetId: string;
  assignedTo?: string;
  priority?: 'low' | 'medium' | 'high' | 'critical';
  riskScore?: number;
  falsePositiveProbability?: number;
  businessImpact?: 'low' | 'medium' | 'high' | 'critical';
  technicalImpact?: 'low' | 'medium' | 'high' | 'critical';
  exploitability?: 'none' | 'low' | 'medium' | 'high';
  exploitAvailable?: boolean;
  publicExploit?: string;
  customFields?: Record<string, any>;
}

/**
 * Vulnerability update request interface
 */
export interface UpdateVulnerabilityRequest {
  title?: string;
  description?: string;
  summary?: string;
  severity?: VulnerabilitySeverity;
  category?: VulnerabilityCategory;
  type?: VulnerabilityType;
  status?: VulnerabilityStatus;
  affectedUrl?: string;
  affectedParameter?: string;
  affectedComponent?: string;
  payload?: string;
  evidence?: VulnerabilityEvidence[];
  remediation?: VulnerabilityRemediation;
  verification?: VulnerabilityVerification;
  tags?: string[];
  assignedTo?: string;
  priority?: 'low' | 'medium' | 'high' | 'critical';
  riskScore?: number;
  falsePositiveProbability?: number;
  businessImpact?: 'low' | 'medium' | 'high' | 'critical';
  technicalImpact?: 'low' | 'medium' | 'high' | 'critical';
  exploitability?: 'none' | 'low' | 'medium' | 'high';
  exploitAvailable?: boolean;
  publicExploit?: string;
  customFields?: Record<string, any>;
}

/**
 * Vulnerability filter interface
 */
export interface VulnerabilityFilter {
  severity?: VulnerabilitySeverity[];
  status?: VulnerabilityStatus[];
  category?: VulnerabilityCategory[];
  type?: VulnerabilityType[];
  targetIds?: string[];
  scanIds?: string[];
  tools?: string[];
  assignedTo?: string[];
  tags?: string[];
  dateRange?: {
    start: Date;
    end: Date;
  };
  riskScoreRange?: {
    min: number;
    max: number;
  };
  exploitAvailable?: boolean;
  search?: string;
}

/**
 * Vulnerability sort options interface
 */
export interface VulnerabilitySort {
  field: keyof Vulnerability;
  direction: 'asc' | 'desc';
}

/**
 * Vulnerability list response interface
 */
export interface VulnerabilityListResponse {
  vulnerabilities: Vulnerability[];
  total: number;
  page: number;
  limit: number;
  hasMore: boolean;
  summary: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
    open: number;
    fixed: number;
    falsePositive: number;
    accepted: number;
  };
}

/**
 * Vulnerability bulk operation interface
 */
export interface VulnerabilityBulkOperation {
  vulnerabilityIds: string[];
  operation: 'update_status' | 'assign' | 'update_priority' | 'add_tags' | 'remove_tags' | 'export';
  data?: Partial<UpdateVulnerabilityRequest>;
}

/**
 * Vulnerability export interface
 */
export interface VulnerabilityExport {
  format: 'pdf' | 'html' | 'json' | 'csv' | 'xml';
  filters?: VulnerabilityFilter;
  fields?: (keyof Vulnerability)[];
  includeEvidence?: boolean;
  includeRemediation?: boolean;
}

/**
 * Vulnerability report interface
 */
export interface VulnerabilityReport {
  id: string;
  name: string;
  description?: string;
  filters: VulnerabilityFilter;
  vulnerabilities: Vulnerability[];
  summary: {
    total: number;
    bySeverity: Record<VulnerabilitySeverity, number>;
    byStatus: Record<VulnerabilityStatus, number>;
    byCategory: Record<VulnerabilityCategory, number>;
    averageRiskScore: number;
    averageRemediationTime: number;
  };
  generatedAt: Date;
  generatedBy: string;
  format: 'pdf' | 'html' | 'json' | 'csv' | 'xml';
  content: string | Blob;
  url?: string;
}

/**
 * Vulnerability trend interface
 */
export interface VulnerabilityTrend {
  period: string;
  total: number;
  new: number;
  fixed: number;
  reopened: number;
  bySeverity: Record<VulnerabilitySeverity, number>;
  averageRiskScore: number;
}

/**
 * Vulnerability statistics interface
 */
export interface VulnerabilityStatistics {
  total: number;
  open: number;
  fixed: number;
  falsePositive: number;
  accepted: number;
  bySeverity: Record<VulnerabilitySeverity, number>;
  byStatus: Record<VulnerabilityStatus, number>;
  byCategory: Record<VulnerabilityCategory, number>;
  byType: Record<VulnerabilityType, number>;
  averageRiskScore: number;
  averageRemediationTime: number;
  topVulnerabilities: Vulnerability[];
  trends: VulnerabilityTrend[];
}

/**
 * Vulnerability API response types
 */
export namespace VulnerabilityAPI {
  export interface CreateResponse {
    vulnerability: Vulnerability;
    message: string;
  }

  export interface UpdateResponse {
    vulnerability: Vulnerability;
    message: string;
  }

  export interface DeleteResponse {
    message: string;
    deletedCount: number;
  }

  export interface BulkResponse {
    success: string[];
    failed: Array<{
      id: string;
      error: string;
    }>;
    message: string;
  }

  export interface ExportResponse {
    report: VulnerabilityReport;
  }

  export interface StatisticsResponse {
    statistics: VulnerabilityStatistics;
  }

  export interface TrendResponse {
    trends: VulnerabilityTrend[];
  }

  export interface VerifyResponse {
    verification: VulnerabilityVerification;
    message: string;
  }

  export interface AssignResponse {
    vulnerability: Vulnerability;
    message: string;
  }

  export interface StatusUpdateResponse {
    vulnerability: Vulnerability;
    message: string;
  }
} 