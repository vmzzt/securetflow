#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üß™ TESTE DE BUILD - SECURET FLOW SSC FRONTEND\n');

// Verificar se o build foi gerado
const distPath = path.join(__dirname, 'dist');
const indexHtmlPath = path.join(distPath, 'index.html');
const assetsPath = path.join(distPath, 'assets');

console.log('üìÅ VERIFICANDO ARQUIVOS DE BUILD:\n');

if (!fs.existsSync(distPath)) {
  console.log('‚ùå Pasta dist n√£o encontrada');
  process.exit(1);
}

if (!fs.existsSync(indexHtmlPath)) {
  console.log('‚ùå index.html n√£o encontrado');
  process.exit(1);
}

console.log('‚úÖ Pasta dist encontrada');
console.log('‚úÖ index.html encontrado');

// Verificar conte√∫do do index.html
const indexHtml = fs.readFileSync(indexHtmlPath, 'utf8');
console.log('‚úÖ index.html lido com sucesso');

// Verificar se tem o div root
if (!indexHtml.includes('<div id="root"></div>')) {
  console.log('‚ùå div#root n√£o encontrado no index.html');
  process.exit(1);
}

console.log('‚úÖ div#root encontrado no index.html');

// Verificar se tem scripts
if (!indexHtml.includes('<script type="module"')) {
  console.log('‚ùå Scripts n√£o encontrados no index.html');
  process.exit(1);
}

console.log('‚úÖ Scripts encontrados no index.html');

// Verificar assets
if (!fs.existsSync(assetsPath)) {
  console.log('‚ùå Pasta assets n√£o encontrada');
  process.exit(1);
}

const assets = fs.readdirSync(assetsPath);
console.log(`‚úÖ Pasta assets encontrada com ${assets.length} arquivos`);

// Verificar se tem arquivos JS
const jsFiles = assets.filter(file => file.endsWith('.js'));
if (jsFiles.length === 0) {
  console.log('‚ùå Nenhum arquivo JS encontrado');
  process.exit(1);
}

console.log(`‚úÖ ${jsFiles.length} arquivos JS encontrados`);

// Verificar se tem arquivos CSS
const cssFiles = assets.filter(file => file.endsWith('.css'));
if (cssFiles.length === 0) {
  console.log('‚ùå Nenhum arquivo CSS encontrado');
  process.exit(1);
}

console.log(`‚úÖ ${cssFiles.length} arquivos CSS encontrados`);

// Verificar tamanho dos arquivos
const totalSize = assets.reduce((total, file) => {
  const filePath = path.join(assetsPath, file);
  const stats = fs.statSync(filePath);
  return total + stats.size;
}, 0);

console.log(`‚úÖ Tamanho total dos assets: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);

// Verificar se o index.html referencia os assets corretamente
const assetFiles = assets.map(file => `/assets/${file}`);
const missingAssets = assetFiles.filter(asset => !indexHtml.includes(asset));

if (missingAssets.length > 0) {
  console.log('‚ö†Ô∏è  Assets n√£o referenciados no index.html:', missingAssets);
} else {
  console.log('‚úÖ Todos os assets est√£o referenciados no index.html');
}

console.log('\nüéâ BUILD TESTADO COM SUCESSO!');
console.log('‚úÖ O frontend est√° pronto para produ√ß√£o');
console.log('‚úÖ Todos os arquivos necess√°rios est√£o presentes');
console.log('‚úÖ O index.html est√° correto');
console.log('‚úÖ Os assets est√£o sendo referenciados corretamente');

console.log('\nüöÄ PR√ìXIMOS PASSOS:');
console.log('1. docker-compose up --build');
console.log('2. Acesse http://localhost');
console.log('3. Verifique se a aplica√ß√£o carrega corretamente');

process.exit(0); 